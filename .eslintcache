[{"/Users/christian/Portfolio Projects/clicker-app/src/index.js":"1","/Users/christian/Portfolio Projects/clicker-app/src/reportWebVitals.js":"2","/Users/christian/Portfolio Projects/clicker-app/src/App.js":"3","/Users/christian/Portfolio Projects/clicker-app/src/components/AutoClickers.js":"4","/Users/christian/Portfolio Projects/clicker-app/src/components/ManualClickers.js":"5"},{"size":478,"mtime":1607034928190,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607034856707,"results":"8","hashOfConfig":"7"},{"size":1668,"mtime":1607049063120,"results":"9","hashOfConfig":"7"},{"size":1317,"mtime":1607047200875,"results":"10","hashOfConfig":"7"},{"size":730,"mtime":1607047582055,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"xwsnva",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/christian/Portfolio Projects/clicker-app/src/index.js",[],["24","25"],"/Users/christian/Portfolio Projects/clicker-app/src/reportWebVitals.js",[],"/Users/christian/Portfolio Projects/clicker-app/src/App.js",[],"/Users/christian/Portfolio Projects/clicker-app/src/components/AutoClickers.js",["26","27"],"import React, { useState } from \"react\";\n\nconst AutoClickers = ({ counter, handleIncrementSum, numberWithCommas }) => {\n  const incrementValues = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\n  const [costFactor, setCostFactor] = useState(1);\n\n  const calculateCost = (num) => {\n    const calculatedCost = costFactor * num;\n    // setCostFactor(prevCostFactor => prevCostFactor * 1.12);\n    return calculatedCost;\n  };\n  return (\n    <div className=\"AutoClickers\">\n      <h3>Finger Slaves</h3>\n      {incrementValues.map((value) => {\n        return (\n          <div key={value}>\n            {counter >= value * 100 && (\n              <div className=\"autoclick-item\">\n                <div>\n                  <p className='autoclick-value'>+{numberWithCommas(value)} cps</p>\n                  <p className='autoclick-price'>(price: {numberWithCommas(value * 100)})</p>\n                </div>\n                <button onClick={() => handleIncrementSum(value)} className=\"increment-button\">\n                  +\n                </button>\n                <button onClick={() => handleIncrementSum(-value)} className=\"decrement-button\">\n                  -\n                </button>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default AutoClickers;\n","/Users/christian/Portfolio Projects/clicker-app/src/components/ManualClickers.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":5,"column":22,"nodeType":"34","messageId":"35","endLine":5,"endColumn":35},{"ruleId":"32","severity":1,"message":"36","line":7,"column":9,"nodeType":"34","messageId":"35","endLine":7,"endColumn":22},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'setCostFactor' is assigned a value but never used.","Identifier","unusedVar","'calculateCost' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]